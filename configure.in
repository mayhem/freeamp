dnl $Id: configure.in,v 1.69 1999/12/29 01:11:54 ijr Exp $
dnl FreeAmp - The Free MP3 Player
dnl Portions copyright (C) 1998-1999 EMusic.com
dnl
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
dnl

dnl Process this file with your mom to produce a configure script
AC_INIT(base/src/player.cpp)
AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_HOST

AC_DEFINE_UNQUOTED(FREEAMP_VERSION, "2.0")

AC_PROG_MAKE_SET

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_ISC_POSIX
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_CHECK_PROGS(PERL, perl)
AC_CHECK_PROGS(NASM, nasm)

dnl libcdaudio stuff
AC_HEADER_STDC
AC_CHECK_HEADERS(linux/cdrom.h linux/ucdrom.h sys/cdio.h io/cam/cdrom.h mntent.h sys/mntent.h sys/ucred.h sys/mount.h)
AC_CHECK_FUNCS(getmntinfo)
AC_FUNC_GETMNTENT

AC_C_CONST

dnl Checks for libraries.

dnl Checks for header files.
AC_STDC_HEADERS
AC_HAVE_HEADERS(unistd.h io.h pthread.h errno.h)

AC_CHECK_LIB(socket, connect, [EXTRALIBS="$EXTRALIBS -lsocket"])
AC_CHECK_LIB(nsl, gethostbyname, [EXTRALIBS="$EXTRALIBS -lnsl"])

dnl Checks for gdbm

AC_ST_BLKSIZE
AC_OFF_T
AC_HAVE_FUNCS(rename ftruncate flock fsync)
AC_CONST
AC_HAVE_HEADERS(sys/file.h string.h stdlib.h memory.h fcntl.h)

dnl end checks for gdbm

AC_CHECK_TYPE(socklen_t, unsigned int)

dnl ******************
dnl Check for dynamic loading library
dnl ******************
if test "$host_os" = "beos"; then
  AC_MSG_WARN([skipping libdl check, using BeOS add-on mechanism])
else
  AC_CHECK_LIB(dl, dlopen, foo="bar",
    AC_MSG_ERROR([FreeAmp requires the ability to load libraries dynamically (-ldl must work)])
  )
fi

dnl Check for some more stuff

cmdline="true"
isunix="true"
OSLINK=""
FPIC="-fPIC"
LINKMOD="$CC -shared"
LIBMOD="ar -r"
OSTYPE="UNIX";

case "$host_os" in
  windowsnt)
    cmdline="false"
    isunix="false"
    ;;
  win32)
    isunix="false"
    OSTYPE="CYGWIN"
    ;;
  beos*)
    AC_DEFINE(HAVE_BEOS)
    OSTYPE="BEOS"
    CFLAGS="$CFLAGS -Wno-multichar -Wno-ctor-dtor-privacy"
    LINKMOD='g++ -nostart -Xlinker -soname=${@F} freeamp'
    isunix="false"
    ;;
  irix*)
    AC_DEFINE(IRIX_CDAUDIO)
    ;;
  linux*)
    AC_DEFINE(HAVE_LINUX)
dnl  OSLINK='-Wl,soname,${*F}'
    LDFLAGS="$LDFLAGS -Wl,-export-dynamic"
dnl not needed.
    ;;
  solaris*)
    host_os="solaris"
    if test "$GCC" != "yes" ; then
      dnl probably Sun CC.
      FPIC="-Kpic"
      LINKMOD="$CC -G"	
    else
      z=`gcc -v 2>&1`;
      if expr "$z" : ".*gcc version 2.95" >/dev/null; then
        CFLAGS="$CFLAGS -fsquangle"
        LDFLAGS="$LDFLAGS -fsquangle"
        if expr "$x_includes" : "/usr/openwin/include" >/dev/null; then
          CFLAGS="$CFLAGS -fpermissive"
          echo "adding -fpermissive to CFLAGS for openwin headers"
        fi
      fi
    fi	
    dnl thank you, oh autoconf, for the oh-so-accurately named
    dnl AC_EGREP_HEADER, which only uses egrep after it PUTS THE
    dnl THING THROUGH CPP, MAKING #defineS NOT SHOW UP!
    dnl This is why we use AC_EGREP_CPP instead.
    AC_EGREP_CPP(yes,
[#include <pthread.h>
#ifdef PTHREAD_MUTEX_ERRORCHECK
   yes
#endif
],
      CFLAGS="$CFLAGS -DSOLDEBUGMUTEX"
        AC_MSG_RESULT("Using Solaris debugging mutexen"),
      AC_MSG_RESULT("Not using Solaris debugging mutexen")
    )
    ;;
  *)
    echo "what are you?"
    ;;
    
esac  

if test "$isunix" = "true" ; then
    AC_LANG_SAVE
    AC_LANG_CPLUSPLUS
    AC_MSG_CHECKING(for G++ >= 2.91)
    AC_TRY_RUN([
#include <stdlib.h>
#include <stdio.h>
int main() {
#if defined (__GNUC__)
#if (__GNUC__ == 2 && __GNUC_MINOR__ >= 91) || __GNUC__ > 2
    printf("%d.%d ", __GNUC__, __GNUC_MINOR__);
    return 0;
#else
    printf("%d.%d", __GNUC__, __GNUC_MINOR__);
    return 1;
#endif
#else
    printf("You're not using gcc, This may or may not compile...\n");
    return 0;
#endif
}
    ], gcc_good=true, gcc_good=false, gcc_good=true)
    if test "$gcc_good" = "true"; then
        AC_MSG_RESULT(yes)
    else
        AC_MSG_RESULT(no)
        echo "You have a version of gcc that is too old to compile FreeAmp."
        echo "We would recommend upgrading your gcc to something relatively"
        echo "recent.  GCC is available at http://gcc.cygnus.com"
        echo "Re-run this configure script after you have a newer version."
        exit 1
    fi
    AC_LANG_RESTORE
fi
 
AC_SUBST(OSTYPE)
AC_DEFINE_UNQUOTED(HOST_OS, "${host_os}")
AC_DEFINE_UNQUOTED(HOST_CPU, "${host_cpu}")


dnl the following is to so that the right includes (and only the right
dnl includes) are added in at compile time.
OSINC="-I$srcdir/base/unix/include -I$srcdir/base/unix/$host_os/include"
OSDEP="unix/$host_os"

if test "$isunix" = "false"  ; then
  OSINC="-I$srcdir/base/$host_os/include -I$srcdir/ui/freeamp/$host_os"
  OSDEP="$host_os"
dnl else
dnl  OSDEPSRC=`find base/unix/src \( -name '*.c' -o -name '*.cpp' \) -print`
fi

dnl oSDEPSRC="$OSDEPSRC `find base/$OSDEP/src \( -name '*.c' -o		\dnl 					     -name '*.cpp' \) -print`"
dnl OSDEPOBJ=`echo $OSDEPSRC | sed -e 's,\.cp*,.o,g' | xargs echo`
dnl I know. This is an abominable way to generate a dependency list.
dnl it's either here or hardcoded in a Makefile, though.

dnl AC_SUBST(OSDEPSRC)
AC_SUBST(OSDEPOBJ)
AC_SUBST(OSDEP)
AC_SUBST(OSINC)
AC_SUBST(OSLINK)
AC_SUBST(FPIC)
AC_SUBST(LINKMOD)
AC_SUBST(LIBMOD)
AC_SUBST(build_cpu)
AC_SUBST(CFLAGS)

AC_CHECK_HEADER(esd.h, have_esound="true", have_esound="false")

AC_ARG_ENABLE(esd, [  --disable-esd           Don't compile the EsounD output plugin], enable_esd=no, enable_esd=yes)

if test "x$enable_esd" = "xno"; then
   have_esound="false"; 
fi

if test "$have_esound" = "true"; then
  AC_PATH_PROG(ESD_CONFIG, esd-config, no)
  if test "$ESD_CONFIG" = "no" ; then
     ESD_LIBS=""
     have_esound="false"
  else
     AC_LANG_SAVE
     AC_LANG_C
     ESD_CFLAGS=`$ESD_CONFIG --cflags`
     ESD_LIBS=`$ESD_CONFIG --libs`
     min_esd_version=0.2.12
     esd_major_version=`$ESD_CONFIG $esd_args --version | \
           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
     esd_minor_version=`$ESD_CONFIG $esd_args --version | \
           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
     esd_micro_version=`$ESD_CONFIG $esd_config_args --version | \
           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`
     ac_save_CFLAGS="$CFLAGS"
     ac_save_LIBS="$LIBS"
     CFLAGS="$CFLAGS $ESD_CFLAGS"
     LIBS="$LIBS $ESD_LIBS"
     rm -f conf.esdtest
     AC_MSG_CHECKING(for ESD - version >= $min_esd_version)
     AC_TRY_RUN([
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <esd.h>

char*
my_strdup (char *str)
{
  char *new_str;

  if (str)
    {
      new_str = malloc ((strlen (str) + 1) * sizeof(char));
      strcpy (new_str, str);
    }
  else
    new_str = NULL;

  return new_str;
}

int main ()
{
  int major, minor, micro;
  char *tmp_version;

  system ("touch conf.esdtest");

  /* HP/UX 9 (%@#!) writes to sscanf strings */
  tmp_version = my_strdup("$min_esd_version");
  if (sscanf(tmp_version, "%d.%d.%d", &major, &minor, &micro) != 3) {
     printf("%s, bad version string\n", "$min_esd_version");
     exit(1);
   }

   if (($esd_major_version > major) ||
      (($esd_major_version == major) && ($esd_minor_version > minor)) ||
      (($esd_major_version == major) && ($esd_minor_version == minor) && ($esd_micro_version >= micro)))
    {
      return 0;
    }
  else
    {
      printf("\n*** 'esd-config --version' returned %d.%d.%d, but the minimum version\n", $esd_major_version, $esd_minor_version, $esd_micro_version);
      printf("*** of ESD required is %d.%d.%d. If esd-config is correct, then it is\n", major, minor, micro);
      printf("*** best to upgrade to the required version.\n");
      printf("*** If esd-config was wrong, set the environment variable ESD_CONFIG\n");
      printf("*** to point to the correct copy of esd-config, and remove the file\n");
      printf("*** config.cache before re-running configure\n");
      return 1;
    }
}

],, have_esound=false, have_esound=false)
     CFLAGS="$ac_save_CFLAGS"
     LIBS="$ac_save_LIBS"
     AC_LANG_RESTORE
  fi
fi

if test "$have_esound" = "true"; then
  AC_MSG_RESULT(yes)
  ESOUNDPLUGIN=plugins/esound.pmo
  OSDEPPLUGINS="$OSDEPPLUGINS $ESOUNDPLUGIN"
  OSINC="$OSINC -I$srcdir/io/esound/include"
else
  AC_MSG_RESULT(no)
  
  ESD_LIBS=""
  have_esound="false"
fi


AC_SUBST(ESD_LIBS)

dnl optional freetype support..

AC_CHECK_HEADERS(freetype.h, have_freetype="true", have_freetype="false")

if test "$have_freetype" = "false"; then
  AC_CHECK_HEADERS(freetype/freetype.h, have_freetype="true", 
                    have_freetype="false")
fi

TTF_LIBS=""
if test "$have_freetype" = "true"; then
  AC_CHECK_LIB(ttf, TT_Init_FreeType, have_freetype="true", 
               have_freetype = "false", -lm)
fi

if test "$have_freetype" = "true"; then
  TTF_LIBS="-lttf"
  AC_DEFINE(HAVE_FREETYPE)
else
  echo "WARNING: You don't have FreeType installed.  This means that FreeAmp"
  echo "will fall back on X fonts.  To make FreeAmp's GUI interface all pretty,"
  echo "you need FreeType.  Get the latest stable version at: "
  echo "http://www.freetype.org/download.htm"
fi
 
AC_SUBST(TTF_LIBS)
 
dnl gtk+ junk

have_gtk="true"

if test "$have_gtk" = "true"; then
  AC_PATH_PROG(GTK_CONFIG, gtk-config, no)
  if test "$GTK_CONFIG" = "no"; then
     have_gtk="false"
  else
     GTK_CFLAGS=`$GTK_CONFIG --cflags`
     GTK_LIBS=`$GTK_CONFIG --libs gthread`
     min_gtk_version="1.2.2"
     AC_MSG_CHECKING(for GTK+ version >= $min_gtk_version)
     gtk_config_major=`$GTK_CONFIG --version | sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
     gtk_config_minor=`$GTK_CONFIG --version | sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
     gtk_config_micro=`$GTK_CONFIG --version | sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`
     ac_save_CFLAGS="$CFLAGS"
     ac_save_LIBS="$LIBS"
     CFLAGS="$CFLAGS $GTK_CFLAGS"
     LIBS="$GTK_LIBS $LIBS"

     AC_TRY_RUN([
#include <gtk/gtk.h>
#include <stdio.h>
#include <stdlib.h>

int main()
{
  int major, minor, micro;
  char *tmp_version;

  tmp_version = g_strdup("$min_gtk_version");
  sscanf(tmp_version, "%d.%d.%d", &major, &minor, &micro);
  if ((gtk_major_version != $gtk_config_major) ||
      (gtk_minor_version != $gtk_config_minor) ||
      (gtk_micro_version != $gtk_config_micro))
      exit(1);
  if ((gtk_major_version > major) ||
     ((gtk_major_version == major) && (gtk_minor_version > minor)) ||
     ((gtk_major_version == major) && (gtk_minor_version == minor) && (gtk_micro_version >= micro)))
     return 0;
  printf("\n*** An old version of GTK+ (%d.%d.%d) was found.\n",
         gtk_major_version, gtk_minor_version, gtk_micro_version);
  return 1;
}], , have_gtk=false, have_gtk=false])
    CFLAGS="$ac_save_CFLAGS"
    LIBS="$ac_save_LIBS" 
    if test "$have_gtk" = "false"; then
       AC_MSG_RESULT(no)
       echo "WARNING: You have an old version of the EsounD software.  If you"
       echo "want EsounD support in FreeAmp, please upgrade to the latest"
       echo "version, which can be found at:"
       echo "ftp://ftp.gnome.org/pub/GNOME/stable/sources/esound"
    else
       AC_MSG_RESULT(yes)
    fi
  fi
fi

if test "$have_gtk" = "true"; then
  OSDEPPLUGINS="$OSDEPPLUGINS plugins/musicbrowser.ui"
  OSDEPPLUGINS="$OSDEPPLUGINS plugins/freeamp.ui MakeTheme"
  OSDEPPLUGINS="$OSDEPPLUGINS plugins/download.ui"
  OSINC="$OSINC -I$srcdir/ui/musicbrowser/unix/include"
  OSINC="$OSINC -I$srcdir/ui/freeamp/include -I$srcdir/ui/freeamp/unix/include"
  OSINC="$OSINC -I$srcdir/ui/download/unix/include"
  CFLAGS="$CFLAGS $GTK_CFLAGS"
  AC_DEFINE(HAVE_GTK)
else
  GTK_CFLAGS=""
  GTK_LIBS=""
  echo "WARNING: GTK+ was not found on this system.  This means you won't be"
  echo "able to use any of the graphical user interfaces.  That's a bad thing,"
  echo "so go get the latest version of GTK+ from http://www.gtk.org"
fi

AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)

AC_ARG_ENABLE(rio, [  --disable-rio           Don't compile the rio pmp300 support plugin], enable_rio=no, enable_rio=yes)

if test "x$enable_rio" = "xyes"; then
   OSDEPPLUGINS="$OSDEPPLUGINS plugins/pmp300.ppp"
else
   echo "Not building the rio pmp300 plugin"
fi

mp3prof="false"

AC_ARG_ENABLE(mp3prof,
	[  --enable-mp3prof        Enable profiling of the MP3 decoder (linux only!)],
	[case "${enableval}" in
	  yes) mp3prof="true" ;;
	  no) mp3prof="false" ;;
	  *) AC_MSG_ERROR(bad value ${enableval} for --enable-mp3prof) ;;
	esac])

if test "$mp3prof" = "true"; then
   AC_DEFINE(MP3_PROF)
fi


dnl *****
dnl Check for LinuxThreads or MIT pthreads
dnl *****

mitpth="false"
ltr="false"

if test "$host_os" = "solaris"; then
  AC_MSG_RESULT([Enabling Solaris threads.])
elif test "$host_os" = "beos"; then
  AC_MSG_RESULT([This is BeOS; using BeOS threads.])
else

  AC_MSG_CHECKING(for MIT PThreads)
  AC_EGREP_HEADER(PTHREAD_MUTEXTYPE_FAST,
  pthread.h,AC_DEFINE(HAVE_MITPTHREADS) AC_MSG_RESULT(yes)
  mitpth="true", 
  AC_MSG_RESULT(no)
  )
  
  AC_MSG_CHECKING(for Base LinuxThreads)
  AC_EGREP_HEADER(PTHREAD_MUTEX_FAST_NP,pthread.h, AC_DEFINE(HAVE_BASELINUXTHREADS) 
  hblt="true"
  ltr="true"
  AC_MSG_RESULT(yes), 
  AC_MSG_RESULT(no)
  )
  
  AC_MSG_CHECKING(for LinuxThreads w/ErrorCheck Mutex)
  AC_EGREP_HEADER(PTHREAD_MUTEX_ERRORCHECK_NP,pthread.h,AC_DEFINE(HAVE_ENHLINUXTHREADS)
  ltr="true"
  AC_MSG_RESULT(yes), 
  AC_MSG_RESULT(no)
  )
  
  if test "$mitpth" = "false"; then
      if test "$ltr" = "false"; then
  	AC_MSG_CHECKING(for broken Slackware MIT PThreads header (Obj C stub) and implementation)
  	AC_TRY_RUN([
  	    #define _MIT_POSIX_THREADS 1
  	    #include <pthread.h>
  	    int main(int argc,char**argv) {
  		int foo;
                  foo = 5 + PTHREAD_MUTEXTYPE_DEBUG;
  		return 0;
              }
  	    ],
  	    AC_DEFINE(HAVE_BROKENMITPTHREADS)
  	    AC_DEFINE(HAVE_MITPTHREADS)
  	    mitpth="true"
  	    AC_MSG_RESULT(yes),
  	    AC_MSG_RESULT(no),
  	    AC_MSG_RESULT(assuming no)
  	)
      fi
  fi
  
  
  if test "$mitpth" = "false"; then
     if test "$ltr" = "false"; then
        echo "Can't find MIT PThreads or LinuxThreads complete development headers in /usr/include or /usr/local/include"
        echo "Configure will stop."
        exit 1
     fi 
  fi

fi dnl solaris, linux, or what have you. I should really indent those.

dnl *****

#AM_CONDITIONAL(AM_HAVE_LINUXTHREADS, test "$hblt" = "true")

AC_ARG_ENABLE(cmdline,
	      [  --enable-cmdline        Build command line freeamp],
	      [case "${enableval}" in
	        yes) cmdline="true" ;;
		no)  cmdline="false" ;;
		*) AC_MSG_ERROR(bad value ${enableval} for --enable-cmdline) ;;
	      esac])
#AM_CONDITIONAL(AM_ENABLE_CMDLINE, test "$cmdline" = "true")


AC_CHECK_LIB(ncurses,initscr,curses="ncurses", [
	AC_CHECK_LIB(curses,initscr,curses="curses", [
	  echo "curses/ncurses not found. disabling curses UI."
	])
])

if test "$curses" != ""; then
	OSDEPPLUGINS="$OSDEPPLUGINS plugins/ncurses.ui";
	CURSES="$curses";
	AC_SUBST(CURSES)
fi
	
dnl ****
dnl Check for alsa
dnl ****
AC_CHECK_HEADER(sys/asoundlib.h,
		AC_CHECK_LIB(asound, main,
			     have_alsa="true"
			     ,
			     have_alsa="false"
		)
		,
		have_alsa="false"
)


AC_ARG_ENABLE(alsa, [  --disable-alsa          Don't compile the ALSA output plugin], enable_alsa=no, enable_alsa=yes)
if test "x$enable_alsa" = "xno"; then
   have_alsa="false";
fi

if test "$have_alsa" = "true"; then
  AC_MSG_CHECKING(for libasound headers version >= 0.4.0)
  alsa_min_major_version=0
  alsa_min_minor_version=4
  alsa_min_micro_version=0
  ac_save_CFLAGS="$CFLAGS"
  ac_save_LIBS="$LIBS"

  LIBS="$LIBS -lasound"
  AC_LANG_SAVE
  AC_LANG_C
  AC_TRY_RUN([
#include <sys/asoundlib.h>
void main(void)
{
/* ensure backward compatibility */
#if !defined(SND_LIB_MAJOR) && defined(SOUNDLIB_VERSION_MAJOR)
#define SND_LIB_MAJOR SOUNDLIB_VERSION_MAJOR
#endif
#if !defined(SND_LIB_MINOR) && defined(SOUNDLIB_VERSION_MINOR)
#define SND_LIB_MINOR SOUNDLIB_VERSION_MINOR
#endif
#if !defined(SND_LIB_SUBMINOR) && defined(SOUNDLIB_VERSION_SUBMINOR)
#define SND_LIB_SUBMINOR SOUNDLIB_VERSION_SUBMINOR
#endif

#  if(SND_LIB_MAJOR > $alsa_min_major_version)
  exit(0);
#  else
#    if(SND_LIB_MAJOR < $alsa_min_major_version)
#       error not present
#    endif

#   if(SND_LIB_MINOR > $alsa_min_minor_version)
  exit(0);
#   else
#     if(SND_LIB_MINOR < $alsa_min_minor_version)
#          error not present
#      endif

#      if(SND_LIB_SUBMINOR < $alsa_min_micro_version)
#        error not present
#      endif
#    endif
#  endif
exit(0);
}
], , have_alsa=false, have_alsa=false
)
   AC_LANG_RESTORE
   CFLAGS="$ac_save_CFLAGS"
   LIBS="$ac_save_LIBS"
   if test "$have_alsa" = "false"; then
      AC_MSG_RESULT(no)
   else
      AC_MSG_RESULT(yes)
   fi
fi

ALSAPMOPLUGIN=plugins/alsa.pmo
if test "$have_alsa" = "true"; then
  OSDEPPLUGINS="$OSDEPPLUGINS $ALSAPMOPLUGIN";
  OSINC="$OSINC -I$srcdir/io/alsa/$OSDEP/include"
  AC_MSG_RESULT([compiling alsa soundcard plugin])
fi


AC_SUBST(EXTRALIBS)
AC_SUBST(OSDEPPLUGINS)
AC_SUBST(OSINC)

AC_ARG_ENABLE(x86opts, [  --disable-x86opts       Don't use any x86 assembly optimizations], enable_x86=no, enable_x86=yes)

if test "x$enable_x86" = "xyes"; then
  if expr "$host_cpu" : "i.86$" > /dev/null; then
    if test -n "$NASM"; then
      AC_MSG_RESULT([Using x86 optimizations])
      XINGASM="`echo lmc/xingmp3/src/{cdct,cwin,cwin8,mdct,msis}asm.o`"
      AC_DEFINE(ASM_X86)
    else
      AC_MSG_RESULT([nasm not available, using older x86 optimizations])
      XINGASM=lmc/xingmp3/src/x86gas.o
      AC_DEFINE(ASM_X86_OLD)
    fi
  fi
fi


AC_SUBST(XINGASM)

AC_CONFIG_HEADER(config/config.h)
AC_OUTPUT(Makefile Makefile-plugins Makefile.header)
touch .config.check
