dnl $Id: configure.in,v 1.49.2.4 1999/09/09 01:25:34 ijr Exp $
dnl FreeAmp - The Free MP3 Player
dnl Portions copyright (C) 1998 GoodNoise
dnl
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
dnl

dnl Process this file with your mom to produce a configure script
AC_INIT(base/src/player.cpp)
AC_CONFIG_AUX_DIR(config)
AC_CANONICAL_HOST

AC_DEFINE_UNQUOTED(FREEAMP_VERSION, "1.3.1")

AC_PROG_MAKE_SET

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_ISC_POSIX
AC_PROG_RANLIB
AC_PROG_INSTALL
AC_CHECK_PROGS(PERL, perl)
AC_CHECK_PROGS(NASM, nasm)

dnl Checks for libraries.

dnl Checks for header files.
AC_STDC_HEADERS
AC_HAVE_HEADERS(unistd.h io.h pthread.h errno.h)

dnl Checks for gdbm

AC_ST_BLKSIZE
AC_OFF_T
AC_HAVE_FUNCS(rename ftruncate flock fsync)
AC_CONST
AC_HAVE_HEADERS(sys/file.h string.h stdlib.h memory.h fcntl.h)

dnl end checks for gdbm

AC_CHECK_TYPE(socklen_t, unsigned int)

xlib="true"

AC_ARG_ENABLE(xlib,
	[  --enable-xlib           Build the FreeAmp Xlib GUI],
	[case "${enableval}" in
	  yes) xlib="true" ;;
	  no) xlib="false" ;;
	  *) AC_MSG_ERROR(bad value ${enableval} for --enable-xlib) ;;
	esac])

dnl ******************
dnl Checks for X stuff
dnl ******************

if test "$xlib"="true"; then
  AC_PATH_X
  AC_PATH_XTRA

  if test "x$no_x" = "xyes"; then 
     xlib="false"
     echo Xlib not found. Xlib UI build disabled.
  else

    CFLAGS="$CFLAGS $X_CFLAGS"
    LDFLAGS="$LDFLAGS $X_LDFLAGS $X_LIBS"

    AC_CHECK_LIB(X11, XOpenDisplay, xlib="true",
      xlib="false"
      echo Xlib not found. Xlib UI build disabled.
    )

    if test "$xlib" = "true"; then
       AC_CHECK_LIB(Xext, XShapeQueryExtension, xlib="true",
         xlib="false"
         echo Xlib Shape Extension not found.  Xlib UI build disabled.
       )

    fi

    if test "$xlib" = "true"; then
       AC_CHECK_HEADER(X11/xpm.h, xlib="true",
[ echo "Hmmm. X11/xpm.h not showing up in your include path."
  echo "Looking for $x_includes/X11/xpm.h directly..."
  z=0;
  if test -f "${x_includes}/X11/xpm.h"; then
    z=1
    echo "Found $x_includes/X11/xpm.h."
  fi
  if test $z = 0; then	
         xlib="false"
         echo XPM Header not found. Xlib UI build disabled.
  fi
]
       )
    fi
  fi
  dnl ******************
  dnl Check for libc5.  If found warn the user about potential problems
  dnl ******************

  AC_MSG_CHECKING(for libc5)
  AC_TRY_RUN([
#include <stdio.h>
#include <ctype.h>
asm (".weak gnu_get_libc_version");
asm (".weak __libc_version");
asm (".weak __linux_C_lib_version");

extern const char * gnu_get_libc_version (void);
extern const char * __linux_C_lib_version;
extern const char __libc_version [];

int main() {
  int libcmajor = 0, libcminor = 0, libcteeny = 0;
  if (((&__linux_C_lib_version != 0)
       && ((&__libc_version != 0) || (gnu_get_libc_version != 0)))
      || (!(&__linux_C_lib_version != 0) && !(&__libc_version != 0)
         && !(gnu_get_libc_version != 0)))
  {
    libcmajor = 0;
    libcminor = 0;
    libcteeny = 0;
  }
  else
  {
    const char * ptr;
    int glibcmajor = 0;

    if (gnu_get_libc_version != 0)
    {
      ptr = gnu_get_libc_version ();
      glibcmajor = 4;
    }
    else if (&__libc_version != 0)
    {
      ptr = __libc_version;
      glibcmajor = 4;
    }
    else
      ptr = __linux_C_lib_version;

    while (!isdigit (*ptr))
      ptr++;

    sscanf (ptr, "%d.%d.%d", &libcmajor, &libcminor, &libcteeny);
    libcmajor += glibcmajor;
  }
  if ((libcmajor == 5) && (!(libcminor == 99))) // see xc/config/cf/linux.cf in the XFree86 distribution
    return 0;
  else
    return 1;
}
  
    ],
    AC_DEFINE(HAVE_LINUX_LIBC5)
    AC_MSG_RESULT(yes)
echo "***"
echo "*** X11 compilation has been enabled and libc5 was found."
echo "*** This means it is likely that your libX11 was built with"
echo "*** libc5 and the X11 defaults for libc5 on linux."
echo "***"
echo "*** There may be unexplained XIO errors causing FreeAmp not to"
echo "*** work.  See http://www.freeamp.org/x11.html for details."
echo "***"
    ,
    AC_MSG_RESULT(no),
    AC_MSG_RESULT(assuming no)
  )



fi

dnl ******************
dnl Check for dynamic loading library
dnl ******************
if test "$host_os" = "beos"; then
  AC_MSG_WARN([skipping libdl check, using BeOS add-on mechanism])
else
  AC_CHECK_LIB(dl, dlopen, foo="bar",
    AC_MSG_ERROR([FreeAmp requires the ability to load libraries dynamically (-ldl must work)])
  )
fi

dnl Check for some more stuff

cmdline="true"
isunix="true"
OSLINK=""
FPIC="-fpic"
LINKMOD="gcc -shared"
OSTYPE="UNIX";

case "$host_os" in
  windowsnt)
    cmdline="false"
    isunix="false"
    ;;
  win32)
    isunix="false"
    OSTYPE="CYGWIN"
    ;;
  beos*)
    AC_DEFINE(HAVE_BEOS)
    OSTYPE="BEOS"
    CFLAGS="$CFLAGS -Wno-multichar -Wno-ctor-dtor-privacy"
    LINKMOD='g++ -nostart -Xlinker -soname=${@F} freeamp'
    isunix="false"
    ;;
  linux*)
    AC_DEFINE(HAVE_LINUX)
dnl  OSLINK='-Wl,soname,${*F}'
    LDFLAGS="$LDFLAGS -Wl,--export-dynamic"
dnl not needed.
    ;;
  solaris*)
    host_os="solaris"
    if test "$GCC" != "yes" ; then
      dnl probably Sun CC.
      FPIC="-Kpic"
      LINKMOD="$CC -G"	
    else
      z=`gcc -v 2>&1`;
      if expr "$z" : ".*gcc version 2.95" >/dev/null; then
        if expr "$x_includes" : "/usr/openwin/include" >/dev/null; then
          CFLAGS="$CFLAGS -fpermissive"
          echo "adding -fpermissive to CFLAGS for openwin headers"
        fi
      fi
    fi	
    dnl thank you, oh autoconf, for the oh-so-accurately named
    dnl AC_EGREP_HEADER, which only uses egrep after it PUTS THE
    dnl THING THROUGH CPP, MAKING #defineS NOT SHOW UP!
    dnl This is why we use AC_EGREP_CPP instead.
    AC_EGREP_CPP(yes,
[#include <pthread.h>
#ifdef PTHREAD_MUTEX_ERRORCHECK
   yes
#endif
],
      CFLAGS="$CFLAGS -DSOLDEBUGMUTEX"
        AC_MSG_RESULT("Using Solaris debugging mutexen"),
      AC_MSG_RESULT("Not using Solaris debugging mutexen")
    )
    ;;
  *)
    echo "what are you?"
    ;;
    
esac  

AC_SUBST(OSTYPE)
AC_DEFINE_UNQUOTED(HOST_OS, "${host_os}")
AC_DEFINE_UNQUOTED(HOST_CPU, "${host_cpu}")


dnl the following is to so that the right includes (and only the right
dnl includes) are added in at compile time.
OSINC="-Ibase/unix/include -Ibase/unix/$host_os/include -Iui/freeamp/unix/include -Iui/freeamp/unix/res"
OSDEP="unix/$host_os"

if test "$isunix" = "false"  ; then
  OSINC="-Ibase/$host_os/include -Iui/freeamp/$host_os"
  OSDEP="$host_os"
dnl else
dnl  OSDEPSRC=`find base/unix/src \( -name '*.c' -o -name '*.cpp' \) -print`
fi

dnl oSDEPSRC="$OSDEPSRC `find base/$OSDEP/src \( -name '*.c' -o		\dnl 					     -name '*.cpp' \) -print`"
dnl OSDEPOBJ=`echo $OSDEPSRC | sed -e 's,\.cp*,.o,g' | xargs echo`
dnl I know. This is an abominable way to generate a dependency list.
dnl it's either here or hardcoded in a Makefile, though.

dnl AC_SUBST(OSDEPSRC)
AC_SUBST(OSDEPOBJ)
AC_SUBST(OSDEP)
AC_SUBST(OSINC)
AC_SUBST(OSLINK)
AC_SUBST(FPIC)
AC_SUBST(LINKMOD)
AC_SUBST(build_cpu)
AC_SUBST(CFLAGS)

AC_CHECK_HEADER(esd.h, have_esound="true", have_esound="false")

if test "$have_esound" = "true"; then
  AC_PATH_PROG(ESD_CONFIG, esd-config, no)
  if test "$ESD_CONFIG" = "no" ; then
     have_esound="false"
  else
     ESD_LIBS=`$ESD_CONFIG --libs`
     EXTRALIBS="$EXTRALIBS $ESD_LIBS"
     ESOUNDPLUGIN=plugins/esound.pmo
     OSDEPPLUGINS="$OSDEPPLUGINS $ESOUNDPLUGIN"
     OSINC="$OSINC -Iio/esound/include"
  fi
fi

AC_SUBST(ESD_LIBS)

dnl gtk+ junk

have_gtk="true"

if test "$have_gtk" = "true"; then
  AC_PATH_PROG(GTK_CONFIG, gtk-config, no)
  if test "$GTK_CONFIG" = "no"; then
     have_gtk="false"
  else
     GTK_CFLAGS=`$GTK_CONFIG --cflags`
     GTK_LIBS=`$GTK_CONFIG --libs`
     min_gtk_version="1.2.2"
     AC_MSG_CHECKING(for GTK+ version >= $min_gtk_version)
     gtk_config_major=`$GTK_CONFIG --version | sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
     gtk_config_minor=`$GTK_CONFIG --version | sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
     gtk_config_micro=`$GTK_CONFIG --version | sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`
     ac_save_CFLAGS="$CFLAGS"
     ac_save_LIBS="$LIBS"
     CFLAGS="$CFLAGS $GTK_CFLAGS"
     LIBS="$GTK_LIBS $LIBS"

     AC_TRY_RUN([
#include <gtk/gtk.h>
#include <stdio.h>
#include <stdlib.h>

int main()
{
  int major, minor, micro;
  char *tmp_version;

  tmp_version = g_strdup("$min_gtk_version");
  sscanf(tmp_version, "%d.%d.%d", &major, &minor, &micro);
  if ((gtk_major_version != $gtk_config_major) ||
      (gtk_minor_version != $gtk_config_minor) ||
      (gtk_micro_version != $gtk_config_micro))
      exit(1);
  if ((gtk_major_version > major) ||
     ((gtk_major_version == major) && (gtk_minor_version > minor)) ||
     ((gtk_major_version == major) && (gtk_minor_version == minor) && (gtk_micro_version >= micro)))
     return 0;
  printf("\n*** An old version of GTK+ (%d.%d.%d) was found.\n",
         gtk_major_version, gtk_minor_version, gtk_micro_version);
  return 1;
}], , have_gtk=false, have_gtk=false])
    CFLAGS="$ac_save_CFLAGS"
    LIBS="$ac_save_LIBS" 
    if test "$have_gtk" = "false"; then
       AC_MSG_RESULT(no)
    else
       AC_MSG_RESULT(yes)
    fi
  fi
fi

if test "$have_gtk" = "true"; then
  MUSICBROWSERPLUGIN=plugins/musicbrowser.ui
  OSDEPPLUGINS="$OSDEPPLUGINS $MUSICBROWSERPLUGIN"
  OSINC="$OSINC -Iui/musicbrowser/unix"
  CFLAGS="$CFLAGS $GTK_CFLAGS"
else
  GTK_CFLAGS=""
  GTK_LIBS=""
fi

AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)

AC_ARG_ENABLE(rio, [  --disable-rio           Don't compile the rio pmp300 support plugin], enable_rio=no, enable_rio=yes)

if test "x$enable_rio" = "xyes"; then
   OSDEPPLUGINS="$OSDEPPLUGINS plugins/pmp300.ppp"
else
   echo "Not building the rio pmp300 plugin"
fi

mp3prof="false"

AC_ARG_ENABLE(mp3prof,
	[  --enable-mp3prof        Enable profiling of the MP3 decoder (linux only!)],
	[case "${enableval}" in
	  yes) mp3prof="true" ;;
	  no) mp3prof="false" ;;
	  *) AC_MSG_ERROR(bad value ${enableval} for --enable-mp3prof) ;;
	esac])

if test "$mp3prof" = "true"; then
   AC_DEFINE(MP3_PROF)
fi


dnl *****
dnl Check for LinuxThreads or MIT pthreads
dnl *****

mitpth="false"
ltr="false"

if test "$host_os" = "solaris"; then
  AC_MSG_RESULT([Enabling Solaris threads.])
elif test "$host_os" = "beos"; then
  AC_MSG_RESULT([This is BeOS; using BeOS threads.])
else

  AC_MSG_CHECKING(for MIT PThreads)
  AC_EGREP_HEADER(PTHREAD_MUTEXTYPE_FAST,
  pthread.h,AC_DEFINE(HAVE_MITPTHREADS) AC_MSG_RESULT(yes)
  mitpth="true", 
  AC_MSG_RESULT(no)
  )
  
  AC_MSG_CHECKING(for Base LinuxThreads)
  AC_EGREP_HEADER(PTHREAD_MUTEX_FAST_NP,pthread.h, AC_DEFINE(HAVE_BASELINUXTHREADS) 
  hblt="true"
  ltr="true"
  AC_MSG_RESULT(yes), 
  AC_MSG_RESULT(no)
  )
  
  AC_MSG_CHECKING(for LinuxThreads w/ErrorCheck Mutex)
  AC_EGREP_HEADER(PTHREAD_MUTEX_ERRORCHECK_NP,pthread.h,AC_DEFINE(HAVE_ENHLINUXTHREADS)
  ltr="true"
  AC_MSG_RESULT(yes), 
  AC_MSG_RESULT(no)
  )
  
  if test "$mitpth" = "false"; then
      if test "$ltr" = "false"; then
  	AC_MSG_CHECKING(for broken Slackware MIT PThreads header (Obj C stub) and implementation)
  	AC_TRY_RUN([
  	    #define _MIT_POSIX_THREADS 1
  	    #include <pthread.h>
  	    int main(int argc,char**argv) {
  		int foo;
                  foo = 5 + PTHREAD_MUTEXTYPE_DEBUG;
  		return 0;
              }
  	    ],
  	    AC_DEFINE(HAVE_BROKENMITPTHREADS)
  	    AC_DEFINE(HAVE_MITPTHREADS)
  	    mitpth="true"
  	    AC_MSG_RESULT(yes),
  	    AC_MSG_RESULT(no),
  	    AC_MSG_RESULT(assuming no)
  	)
      fi
  fi
  
  
  if test "$mitpth" = "false"; then
     if test "$ltr" = "false"; then
        echo "Can't find MIT PThreads or LinuxThreads complete development headers in /usr/include or /usr/local/include"
        echo "Configure will stop."
        exit 1
     fi 
  fi

fi dnl solaris, linux, or what have you. I should really indent those.

dnl *****

#AM_CONDITIONAL(AM_HAVE_LINUXTHREADS, test "$hblt" = "true")

AC_ARG_ENABLE(cmdline,
	      [  --enable-cmdline        Build command line freeamp],
	      [case "${enableval}" in
	        yes) cmdline="true" ;;
		no)  cmdline="false" ;;
		*) AC_MSG_ERROR(bad value ${enableval} for --enable-cmdline) ;;
	      esac])
#AM_CONDITIONAL(AM_ENABLE_CMDLINE, test "$cmdline" = "true")


FAUIPLUGIN=plugins/freeamp-xlib.ui
if test "$isunix" = "false" -o "$xlib" = "false"; then
  AC_MSG_WARN([not compiling freeamp-xlib.ui plugin])
else
  OSDEPPLUGINS="$OSDEPPLUGINS $FAUIPLUGIN";
  EXTRALIBS="$EXTRALIBS -lXpm"
fi

AC_CHECK_LIB(ncurses,initscr,curses="ncurses", [
	AC_CHECK_LIB(curses,initscr,curses="curses", [
	  echo "curses/ncurses not found. disabling curses UI."
	])
])

if test "$curses" != ""; then
	OSDEPPLUGINS="$OSDEPPLUGINS plugins/ncurses.ui";
	CURSES="$curses";
	AC_SUBST(CURSES)
fi
	
dnl ****
dnl Check for alsa
dnl ****
AC_CHECK_HEADER(sys/asoundlib.h,
		AC_CHECK_LIB(asound, main,
			     have_alsa="true"
			     ,
			     have_alsa="false"
		)
		,
		have_alsa="false"
)

ALSAPMOPLUGIN=plugins/alsa.pmo
if test "$have_alsa" = "true"; then
  OSDEPPLUGINS="$OSDEPPLUGINS $ALSAPMOPLUGIN";
  OSINC="$OSINC -Iio/alsa/$OSDEP/include"
  AC_MSG_RESULT([compiling alsa soundcard plugin])
fi


AC_SUBST(EXTRALIBS)
AC_SUBST(OSDEPPLUGINS)
AC_SUBST(OSINC)

if expr "$host_cpu" : "i.86$" > /dev/null; then
  if test -n "$NASM"; then
    AC_MSG_RESULT([Using x86 optimizations])
    XINGASM="`echo lmc/xingmp3/src/{cdct,cwin,cwin8,mdct,msis}asm.o`"
    AC_DEFINE(ASM_X86)
  else
    AC_MSG_RESULT([nasm not available, using older x86 optimizations])
    XINGASM=lmc/xingmp3/src/x86gas.o
    AC_DEFINE(ASM_X86_OLD)
  fi
fi


AC_SUBST(XINGASM)

AC_CONFIG_HEADER(config/config.h)
AC_OUTPUT(Makefile Makefile-plugins config/Makefile.header)
touch .config.check
