
////////////////////////////////////////////////////////////////////////////////
//
//  IIIIIII SSSSSS
//    II    SS                          InstallShield (R)
//    II    SSSSSS      (c) 1996-1997, InstallShield Software Corporation
//    II        SS      (c) 1990-1996, InstallShield Corporation
//  IIIIIII SSSSSS                     All Rights Reserved.
//
//
//  This code is generated as a starting setup template.  You should
//  modify it to provide all necessary steps for your setup.
//
//
//    File Name:  Setup.rul
//
//  Description:  InstallShield script
//
//     Comments:  This template script performs a basic setup. With minor
//                modifications, this template can be adapted to create
//                new, customized setups.
//
////////////////////////////////////////////////////////////////////////////////


// Include header files

    #include "sdlang.h"
    #include "sddialog.h"

////////////////////// string defines ////////////////////////////

    #define UNINST_LOGFILE_NAME      "Uninst.isu"

//////////////////// installation declarations ///////////////////

// ----- DLL function prototypes -----


    // your DLL function prototypes
    prototype BOOL FreeAmpCustomCode.InitDDE();
    prototype BOOL FreeAmpCustomCode.UninitDDE();
    prototype BOOL FreeAmpCustomCode.RestartNetscape();

// ---- script function prototypes -----


    // generated by the Project Wizard
    prototype ShowDialogs();
    prototype MoveFileData();
    prototype HandleMoveDataError( NUMBER );
    prototype ProcessBeforeDataMove();
    prototype ProcessAfterDataMove();
    prototype SetupRegistry();
    prototype SetupFolders();
    prototype CleanUpInstall();
    prototype SetupInstall();
    prototype SetupScreen();
    prototype CheckRequirements();
    prototype DialogShowSdWelcome();
    prototype DialogShowSdLicense();
    prototype DialogShowSdSetupType();
    prototype DialogShowSdComponentDialog2();
    prototype DialogShowSdSelectFolder();
    prototype DialogShowSdStartCopy();
    prototype DialogShowSdFinishReboot();

    // your script function prototypes
    prototype DialogSdRegisterUser();
    prototype DialogShowAskAboutFileTypes();
	prototype DialogShowAskToRestartNetscape();
	prototype DialogAskForMusicFolder();


    // ----- global variables ------

    // generated by the Project Wizard
    BOOL        bWinNT, bIsShellExplorer, bInstallAborted, bIs32BitSetup;
    STRING      svDir;
    STRING      svCompany, svSerial;
    STRING      svDefGroup;
    STRING      szAppPath;
    STRING      svSetupType;
    STRING		svProductName;
    STRING		svFolderName;
    STRING		svMainTitle;
    STRING		svUninstallDisplayName;
    STRING		svUninstallKey;

    LIST        listStartCopy;


    // your global variables
    STRING      svFirstName, svLastName;
    STRING		svDefaultMusicDir;
    BOOL		bNetscapeDetected;
    BOOL		bRegisterFileTypes, bReclaimFileTypes, bRegisterForRMPs;


///////////////////////////////////////////////////////////////////////////////
//
//   MAIN PROGRAM
//
//      The setup begins here by hiding the visible setup
//      window.  This is done to allow all the titles, images, etc. to
//      be established before showing the main window.  The setup is
//      then performed in a series of calls to script defined functions,
//      with error checking at each step.
//
///////////////////////////////////////////////////////////////////////////////
program
	SetColor (BACKGROUND, RGB (0, 0, 255) | BK_SMOOTH);
	UseDLL( SUPPORTDIR ^ "FreeAmpCustomCode.dll" );	
	
	InitDDE();
    // Disable( BACKGROUND );

    CheckRequirements();

    SetupInstall();

    SetupScreen();
    bRegisterFileTypes = TRUE;
    bReclaimFileTypes = TRUE;

    if (ShowDialogs()<0) goto end_install;

    if (ProcessBeforeDataMove()<0) goto end_install;

    if (MoveFileData()<0) goto end_install;

    if (ProcessAfterDataMove()<0) goto end_install;
	
    if (SetupRegistry()<0) goto end_install;

    if (SetupFolders()<0) goto end_install;

    end_install:

    CleanUpInstall();

    UninitDDE();
   	UnUseDLL( SUPPORTDIR ^ "FreeAmpCustomCode.dll" );

    // If an unrecoverable error occurred, clean up
    // the partial installation. Otherwise, exit normally.

    if (bInstallAborted) then
        abort;
    endif;

endprogram

///////////////////////////////////////////////////////////////////////////////
//
// Function:  ShowDialogs
//
//  Purpose:  This function manages the display and navigation of
//            the standard dialogs that exist in a setup.
//
///////////////////////////////////////////////////////////////////////////////
function ShowDialogs()
    NUMBER  nResult;

begin

    Dlg_Start:
    // beginning of dialogs label

    Dlg_SdWelcome:
    nResult = DialogShowSdWelcome();
    if (nResult = BACK) goto Dlg_Start;

    Dlg_SdLicense:
    nResult = DialogShowSdLicense();
    if (nResult = BACK) goto Dlg_SdWelcome;

    //Dlg_SdRegisterUser:
    //nResult = DialogSdRegisterUser();
    //if (nResult = BACK) goto Dlg_SdLicense;

    Dlg_SdSetupType:
    nResult = DialogShowSdSetupType();
    if (nResult = BACK) goto Dlg_SdLicense;
    //we are skipping registering the user for now
    //if (nResult = BACK) goto Dlg_SdRegisterUser;

    Dlg_SdComponentDialog2:
    if ((nResult = BACK) && (svSetupType != "Custom") && (svSetupType != "")) then
        goto Dlg_SdSetupType;
    endif;
    nResult = DialogShowSdComponentDialog2();
    if (nResult = BACK) goto Dlg_SdSetupType;

    Dlg_SdFileTypes:
    if ((nResult = BACK) && (svSetupType != "Custom") && (svSetupType != "")) then
        goto Dlg_SdSetupType;
    endif;
    nResult = DialogShowAskAboutFileTypes();
    if (nResult = BACK) goto Dlg_SdComponentDialog2;

    Dlg_AskForMusicFolder:
    nResult = DialogAskForMusicFolder();
    if (nResult = BACK) goto Dlg_SdFileTypes;

    Dlg_SdSelectFolder:
    nResult = DialogShowSdSelectFolder();
    if (nResult = BACK) goto Dlg_AskForMusicFolder;


//    Dlg_SdStartCopy:
//    nResult = DialogShowSdStartCopy();
//    if (nResult = BACK) goto Dlg_SdSelectFolder;

    return 0;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: ProcessBeforeDataMove
//
//  Purpose: This function performs any necessary operations prior to the
//           actual file transfer.
//
///////////////////////////////////////////////////////////////////////////////
function ProcessBeforeDataMove()
    STRING svLogFile;
    NUMBER nResult;
    STRING svVersion;

begin

  // Create app information, uninstallation, and App Paths registry keys.

	svVersion = @PRODUCT_VERSION + @VERSION_STRING_SPECIAL;
	
    InstallationInfo( @COMPANY_NAME, svProductName, svVersion, @PRODUCT_KEY );

    svLogFile = UNINST_LOGFILE_NAME;

    nResult = DeinstallStart( svDir, svLogFile, svUninstallKey, 0 );
    if (nResult < 0) then
        MessageBox( @ERROR_UNINSTSETUP, WARNING );
    endif;

    szAppPath = TARGETDIR; // TO DO : if your application .exe is in a subfolder
                           // of TARGETDIR then add subfolder

    if ((bIs32BitSetup) && (bIsShellExplorer)) then
        RegDBSetItem( REGDB_APPPATH, szAppPath );
        RegDBSetItem( REGDB_APPPATH_DEFAULT, szAppPath ^ @PRODUCT_KEY );
        RegDBSetItem( REGDB_UNINSTALL_NAME, svUninstallDisplayName );
    endif;

    // TO DO : any other tasks you want to perform before file transfer

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  Function:  MoveFileData
//
//  Purpose:  This function handles the file transfer for
//            the setup.
//
///////////////////////////////////////////////////////////////////////////////
function MoveFileData()
    NUMBER nResult, nDisk;

begin

    nDisk = 1;
    SetStatusWindow( 0, "" );
    Disable( DIALOGCACHE );
    Enable( STATUS );
    StatusUpdate( ON, 100 );
    nResult = ComponentMoveData( MEDIA, nDisk, 0 );

    HandleMoveDataError( nResult );

    Disable( STATUS );

    return nResult;

end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: HandleMoveDataError
//
//  Purpose: This function handles the error (if any) during the file transfer
//           operation.
//
///////////////////////////////////////////////////////////////////////////////
function HandleMoveDataError( nResult )
    STRING szErrMsg, svComponent , svFileGroup , svFile;

begin

    svComponent = "";
    svFileGroup = "";
    svFile = "";

    switch (nResult)
        case 0:
            return 0;
        default:
            ComponentError ( MEDIA , svComponent , svFileGroup , svFile , nResult );
            szErrMsg = @ERROR_MOVEDATA  + "\n\n" +
                @ERROR_COMPONENT + " " + svComponent + "\n" +
                @ERROR_FILEGROUP + " " + svFileGroup + "\n" +
                @ERROR_FILE      + " " + svFile;
            SprintfBox( SEVERE, @PRODUCT_NAME + " Setup", szErrMsg, nResult );
            bInstallAborted = TRUE;
            return nResult;
    endswitch;

end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: ProcessAfterDataMove
//
//  Purpose: This function performs any necessary operations needed after
//           all files have been transferred.
//
///////////////////////////////////////////////////////////////////////////////
function ProcessAfterDataMove()
    STRING szReferenceFile;

begin

    // TO DO : update self-registered files and other processes that
    //        should be performed after the files have been transferred.

    // DeinstallSetReference specifies a file to be checked before
    // uninstallation. If the file is in use, uninstallation will not proceed.

    szReferenceFile = svDir ^ @PRODUCT_KEY; // TO DO : If your file is in a
                                            // subfolder of svDir add that here
    DeinstallSetReference( szReferenceFile );

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupRegistry
//
//  Purpose: This function makes the registry entries for this setup.
//
///////////////////////////////////////////////////////////////////////////////
function SetupRegistry()
    NUMBER nResult, nType, nSize;
	STRING szKey, szNetscapeKey1, szNetscapeKey2, szReclaimFileTypes;
	STRING szUserName, szUserNameKey;
	BOOL bInLocalMachine, bInCurrentUser;
begin

    // TO DO : Add all your registry entry keys here.
    // Call registry functions and/or create keys from
    // the InstallShield IDE's Resources pane.

	bRegisterForRMPs = TRUE;	
		
	// First set up the default registry entries
	nResult = CreateRegistrySet("MainSet");
    nResult = CreateRegistrySet("FreeAmpSet");
	nResult = CreateRegistrySet("DSoundSet");
	nResult = CreateRegistrySet("SoundCardSet");
	
	if(bRegisterFileTypes = TRUE) then
		nResult = CreateRegistrySet("RegisterFileTypes");
		
		// RMP support
		if(bRegisterForRMPs = TRUE) then
			nResult = CreateRegistrySet("RegisterRMPFileType");
		endif;		
	endif;
	
	// We want to look under HKEY_CURRENT_USER
	RegDBSetDefaultRoot(HKEY_CURRENT_USER);
	
	//szKey = "Software\\" + @COMPANY_NAME + "\\" + @PRODUCT_NAME +
	//		" v" + @PRODUCT_VERSION + "\\Main";
	
	szKey = @MAIN_REGISTRY_KEY;
	
	szUserNameKey = "Software\\Microsoft\\MS Setup (ACME)\\User Info";
			
	// Create the ones that are dynamic
	//szUserName = svFirstName + " " + svLastName;
	RegDBGetKeyValueEx(szUserNameKey, "DefName", nType, szUserName, nSize);
	RegDBSetKeyValueEx(szKey, "UserName", REGDB_STRING, szUserName, -1);	
	RegDBSetKeyValueEx(szKey, "SaveMusicDirectory", REGDB_STRING, svDefaultMusicDir, -1);
	
	if(bReclaimFileTypes = TRUE) then
		szReclaimFileTypes = "1";
	else
		szReclaimFileTypes = "0";
	endif;
	
	RegDBSetKeyValueEx(szKey, "ReclaimFileTypes", REGDB_NUMBER, szReclaimFileTypes, -1);
	
	// Finally we need to let Netscape know to use us
	bNetscapeDetected = FALSE;
	szNetscapeKey1 = "Software\\Netscape\\Netscape Navigator\\Main";
	szNetscapeKey2 = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\Netscape.exe";
	
	RegDBSetDefaultRoot(HKEY_LOCAL_MACHINE);
	if(RegDBKeyExist(szNetscapeKey2) = 1) then bInLocalMachine = TRUE; endif;
	
	RegDBSetDefaultRoot(HKEY_CURRENT_USER);
	if(RegDBKeyExist(szNetscapeKey1) = 1) then bInCurrentUser = TRUE; endif;
			
	if(bInLocalMachine = TRUE && bInCurrentUser = TRUE) then
		bNetscapeDetected = TRUE;
		
		
		// RMP support
		if(bRegisterForRMPs = TRUE) then
			szKey = "Software\\Netscape\\Netscape Navigator\\Suffixes";
			RegDBSetKeyValueEx(szKey, "application/vnd.rn-rn_music_package", REGDB_STRING, "rmp", -1);
			szKey = "Software\\Netscape\\Netscape Navigator\\Viewers";
			RegDBSetKeyValueEx(szKey, "application/vnd.rn-rn_music_package", REGDB_STRING, szAppPath ^ @PRODUCT_KEY, -1);
			szKey = "Software\\Netscape\\Netscape Navigator\\User Trusted External Applications";
			RegDBSetKeyValueEx(szKey, szAppPath ^ @PRODUCT_KEY, REGDB_STRING, "Yes", -1);		
		endif;
		
		
		if(bRegisterFileTypes = TRUE) then		
			// MP3 support
			szKey = "Software\\Netscape\\Netscape Navigator\\Suffixes";
			RegDBSetKeyValueEx(szKey, "audio/x-mpeg", REGDB_STRING, "mp1,mp2,mp3", -1);
			RegDBSetKeyValueEx(szKey, "audio/x-mp3", REGDB_STRING, "mp3", -1);
			RegDBSetKeyValueEx(szKey, "audio/x-mpegurl", REGDB_STRING, "m3u", -1);
			RegDBSetKeyValueEx(szKey, "audio/x-scpls", REGDB_STRING, "pls", -1);
			
			// Some Apps are idiots and register these so if we do not
			// there is a chance Netscape will ignore the actual
			// mimetype above...grrr...
			RegDBSetKeyValueEx(szKey, "audio/mpeg", REGDB_STRING, "mp1,mp2,mp3", -1);
			RegDBSetKeyValueEx(szKey, "audio/mp3", REGDB_STRING, "mp3", -1);
			RegDBSetKeyValueEx(szKey, "audio/mpegurl", REGDB_STRING, "m3u", -1);
			RegDBSetKeyValueEx(szKey, "audio/scpls", REGDB_STRING, "pls", -1);
			
				
			szKey = "Software\\Netscape\\Netscape Navigator\\Viewers";
			RegDBSetKeyValueEx(szKey, "audio/x-mpeg", REGDB_STRING, szAppPath ^ @PRODUCT_KEY, -1);
			RegDBSetKeyValueEx(szKey, "audio/x-mp3", REGDB_STRING, szAppPath ^ @PRODUCT_KEY, -1);
			RegDBSetKeyValueEx(szKey, "audio/x-mpegurl", REGDB_STRING, szAppPath ^ @PRODUCT_KEY, -1);
			RegDBSetKeyValueEx(szKey, "audio/x-scpls", REGDB_STRING, szAppPath ^ @PRODUCT_KEY, -1);
			
			// Some servers are idiots and send these so if we do not
			// there is a chance Netscape will not find the real type
			RegDBSetKeyValueEx(szKey, "audio/mpeg", REGDB_STRING, szAppPath ^ @PRODUCT_KEY, -1);
			RegDBSetKeyValueEx(szKey, "audio/mp3", REGDB_STRING, szAppPath ^ @PRODUCT_KEY, -1);
			RegDBSetKeyValueEx(szKey, "audio/mpegurl", REGDB_STRING, szAppPath ^ @PRODUCT_KEY, -1);
			RegDBSetKeyValueEx(szKey, "audio/scpls", REGDB_STRING, szAppPath ^ @PRODUCT_KEY, -1);
			
		
			szKey = "Software\\Netscape\\Netscape Navigator\\User Trusted External Applications";
			RegDBSetKeyValueEx(szKey, szAppPath ^ @PRODUCT_KEY, REGDB_STRING, "Yes", -1);	
		endif;	
				
	endif;
	
    return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupFolders
//
//  Purpose: This function creates all the folders and shortcuts for the
//           setup.  This includes program groups and items for Windows 3.1.
//
///////////////////////////////////////////////////////////////////////////////
function SetupFolders()
    NUMBER nResult;
	STRING szPath;
begin


    // TO DO : Add all your folders (or program groups) along with shortcuts (or
    // program items). Call CreateProgramFolder and AddFolderIcon, and/or create
    // shortcuts etc. from the InstallShield IDE's Resources pane.
    //
    // Note : for 16-bit setups you should add an uninstaller icon pointing to
    //        your log file.  Under 32-bit this is automatically done by Windows.

    nResult = CreateShellObjects( "" );

    ProgDefGroupType(PERSONAL);

    szPath = TARGETDIR ^ "FreeAmp.exe";
    LongPathToQuote(szPath, TRUE);

    nResult = AddFolderIcon(FOLDER_PROGRAMS ^ SHELL_OBJECT_FOLDER,
    						@PRODUCT_NAME,
    						szPath,
    						"",
    						"",
    						0,
    						"",
    						REPLACE);

    return nResult;
 end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: CleanUpInstall
//
//  Purpose: This cleans up the setup.  Anything that should
//           be released or deleted at the end of the setup should
//           be done here.
//
///////////////////////////////////////////////////////////////////////////////
function CleanUpInstall()

begin

    ListDestroy( listStartCopy );

    if (bInstallAborted) then
        return 0;
    endif;

	DialogShowAskToRestartNetscape();
	
    DialogShowSdFinishReboot();

    if (BATCH_INSTALL) then // ensure locked files are properly transferred
        CommitSharedFiles(0);
    endif;

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: SetupInstall
//
//  Purpose: This will initialize the setup.  Any general initialization
//           needed for the installation should be performed here.
//
///////////////////////////////////////////////////////////////////////////////
function SetupInstall()

begin

    Enable( CORECOMPONENTHANDLING );

    bInstallAborted = FALSE;

    // Append product version to appropriate strings
    svProductName = @PRODUCT_NAME + " " + @PRODUCT_VERSION + @VERSION_STRING_SPECIAL;
    svFolderName = @FOLDER_NAME;// + " " + @PRODUCT_VERSION;
    svMainTitle = svProductName;
    svUninstallDisplayName = @UNINST_DISPLAY_NAME + " " + @PRODUCT_VERSION + @VERSION_STRING_SPECIAL;
    svUninstallKey = @UNINST_KEY + " " + @PRODUCT_VERSION + @VERSION_STRING_SPECIAL;

    //  Create list of end user selections to be displayed by DialogShowSdStartCopy()  //

    listStartCopy = ListCreate(STRINGLIST);

    ListAddString( listStartCopy, "Place the summary here.", AFTER );

    if (bIs32BitSetup) then
        svDir = PROGRAMFILES ^ svFolderName;
    else
        svDir = PROGRAMFILES ^ svFolderName; // use short names
    endif;

    TARGETDIR  = svDir;

    SdProductName( svProductName );

    Enable( DIALOGCACHE );

    return 0;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  SetupScreen
//
//  Purpose:  This function establishes the screen look.  This includes
//            colors, fonts, and text to be displayed.
//
///////////////////////////////////////////////////////////////////////////////
function SetupScreen()

begin

    Enable( FULLWINDOWMODE );
    Enable( INDVFILESTATUS );
    SetTitle( svMainTitle, 24, WHITE );

    SetTitle( @PRODUCT_NAME + " Setup", 0, BACKGROUNDCAPTION ); // Caption bar text.

    Enable( BACKGROUND );

    Delay( 1 );
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function:  CheckRequirements
//
//  Purpose:  This function checks all minimum requirements for the
//            application being installed.  If any fail, then the user
//            is informed and the setup is terminated.
//
///////////////////////////////////////////////////////////////////////////////
function CheckRequirements()
    NUMBER  nvDx, nvDy, nvResult;
    STRING  svResult;

begin

    bWinNT           = FALSE;
    bIsShellExplorer = FALSE;

    // Check screen resolution.
    GetExtents( nvDx, nvDy );

    if (nvDy < 480) then
        MessageBox( @ERROR_VGARESOLUTION, WARNING );
        abort;
    endif;

    // set 'setup' operation mode
    bIs32BitSetup = TRUE;
    GetSystemInfo( ISTYPE, nvResult, svResult );
    if (nvResult = 16) then
        bIs32BitSetup = FALSE; // running 16-bit setup
        return 0; // no additional information required
    endif;

    // --- 32-bit testing after this point ---

    // Determine the target system's operating system.
    GetSystemInfo( OS, nvResult, svResult );

    if (nvResult =  IS_WINDOWSNT) then
        // Running Windows NT.
        bWinNT = TRUE;

        // Check to see if the shell being used is EXPLORER shell.
        if (GetSystemInfo( OSMAJOR, nvResult, svResult ) = 0) then
            if (nvResult >= 4) then
                bIsShellExplorer = TRUE;
            endif;
        endif;

    elseif (nvResult = IS_WINDOWS95 ) then
        bIsShellExplorer = TRUE;

    endif;

end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdWelcome
//
//  Purpose: This function handles the standard welcome dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdWelcome()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "";
    szMsg   = "";
    nResult = SdWelcome( szTitle, szMsg );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdLicense
//
//  Purpose: This function displays the license agreement dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdLicense()
    NUMBER nResult;
    STRING szTitle, szMsg, szQuestion, szLicenseFile;

begin

    szLicenseFile = SUPPORTDIR ^ "license.txt";
    szTitle    = "";
    szMsg      = "";
    szQuestion = "";
    nResult    = SdLicense( szTitle, szMsg, szQuestion, szLicenseFile );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogSdRegisterUser
//
//  Purpose: This function asks the user who they are so that ater we can
//           customize our interface for them.
//
///////////////////////////////////////////////////////////////////////////////
function DialogSdRegisterUser()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "User Info";
    szMsg   = "Please enter your first and last name below. " + @THE_PRODUCT_NAME_UC +
    		  " will only use this information to customize its interface for" +
    		  " you. Under no circumstance will this information be distributed.";
    		
    //nResult = SdRegisterUser( szTitle, szMsg, svFirstName, svLastName );
    nResult = SdShowDlgEdit2( szTitle, szMsg, "First Name:", "Last Name:",
    							svFirstName, svLastName );

    return nResult;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogAskForMusicFolder
//
//  Purpose: This function asks the user for the music destination folder.
//
///////////////////////////////////////////////////////////////////////////////
function DialogAskForMusicFolder()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "Default Music Folder";
    szMsg   = @THE_PRODUCT_NAME_UC + " features the ability to download music " +
    		  "directly from within the player. Where would you like to save " +
    		  "your downloaded music files?";
    		
    SetDialogTitle(DLG_ASK_PATH, szTitle);	
    nResult = AskPath( szMsg, TARGETDIR ^ "My Music", svDefaultMusicDir);
    StrRemoveLastSlash(svDefaultMusicDir);

    return nResult;
end;

///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdSetupType
//
//  Purpose: This function displays the standard setup type dialog.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdSetupType()
    NUMBER nResult, nType;
    STRING szTitle, szMsg;

begin

    switch (svSetupType)
    	case "Typical":
        	nType = TYPICAL;
    	case "Custom":
        	nType = CUSTOM;
    	case "Compact":
        	nType = COMPACT;
    	case "":
        	svSetupType = "Typical";
        	nType = TYPICAL;
    endswitch;

    szTitle = "";
    szMsg   = "";
    nResult = SdSetupType( szTitle, szMsg, svDir, nType );
    //nResult = SdSetupTypeEx ( szTitle , szMsg , "" , svSetupType , 0 );

    TARGETDIR = svDir;

    switch (nResult)
 		case COMPACT:
            svSetupType = "Compact";
        case TYPICAL:
            svSetupType = "Typical";
       	case CUSTOM:
            svSetupType = "Custom";
	endswitch;

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
// Function: DialogShowSdComponentDialog2
//
//  Purpose: This function displays the custom component dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdComponentDialog2()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    if ((svSetupType != "Custom") && (svSetupType != "")) then
        return 0;
    endif;

    szTitle  = "";
    szMsg    = "";
    //nResult  = SdComponentDialog2( szTitle, szMsg, svDir, "" );
	nResult = SdComponentMult ( szTitle , szMsg , TARGETDIR , "" );
    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdSelectFolder
//
//  Purpose: This function displays the standard folder selection dialog.
//
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdSelectFolder()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    if (SHELL_OBJECT_FOLDER = "") then
        SHELL_OBJECT_FOLDER = @PRODUCT_NAME + " " + @PRODUCT_VERSION;
    endif;

    szTitle    = "";
    szMsg      = "";
    nResult    = SdSelectFolder( szTitle, szMsg, SHELL_OBJECT_FOLDER );

    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdStartCopy
//
//  Purpose: This function displays the dialog preceding the start of the
//           file transfer process.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdStartCopy()
    NUMBER nResult;
    STRING szTitle, szMsg;

begin

    szTitle = "";
    szMsg   = "";
    nResult = SdStartCopy( szTitle, szMsg, listStartCopy );

    return nResult;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowAskAboutFileTypes
//
//  Purpose: This function displays a dialog asking the user for permission
//           to register filetypes.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowAskAboutFileTypes()
    NUMBER nResult;
    STRING szTitle, szMsg, szOpt1, szOpt2;
    BOOL   bOpt1, bOpt2;

begin

    if ((svSetupType != "Custom") && (svSetupType != "")) then
        return 0;
    endif;

	szTitle = "File Types";
    szMsg  	= "Setup can register " + @THE_PRODUCT_NAME_LC + " to be your default MP3 player. " +
    		  "Sometimes other applications register themselves to handle file types without " +
    		  "asking for your permission. Do you want " + @THE_PRODUCT_NAME_LC + " to reclaim supported " +
    		  "file types if they are registered by another application?\r\n\r\n" +
     		  "Select the file type options you wish for setup to use. ";
    		
	szOpt1 	= "Make " + @THE_PRODUCT_NAME_LC + " my default MP3 player.";
	szOpt2  = "Allow " + @THE_PRODUCT_NAME_LC + " to reclaim stolen filetypes.";    		
    bOpt1	= TRUE;
    bOpt2	= FALSE;
    	
    SetDialogTitle(DLG_ASK_OPTIONS, szTitle);	

    nResult = AskOptions( NONEXCLUSIVE, szMsg, szOpt1, bRegisterFileTypes, szOpt2, bReclaimFileTypes);
	
    return nResult;
end;

///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowAskToRestartNetscape
//
//  Purpose: This function displays a dialog if Netscape is installed asking
//           for permission to restart Netscape so our filetypes will be
//			 properly associated.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowAskToRestartNetscape()
    NUMBER nResult;
    STRING szTitle, szMsg, szOpt1, szOpt2;
    BOOL   bOpt1, bOpt2;

begin

	if(bNetscapeDetected = TRUE) then
	
    	szTitle = "Restart Netscape?";
    	szMsg  	= "Setup has detected that Netscape is installed on your computer. "  +
    			  "In order to complete the installation of " + @THE_PRODUCT_NAME_LC +
    			  " we need to restart Netscape if it is running. After shutting down " +
    			  "Netscape we will attempt to restart the application and " +
   		 		  "return you to any web pages you are currently viewing.";
		szOpt1 	= "Yes, please restart Netscape for me. Thank you for asking!";
		szOpt2  = "No, do not restart Netscape. I will restart Netscape myself.";    		
    	bOpt1	= TRUE;
    	bOpt2	= FALSE;
    	
    	SetDialogTitle(DLG_ASK_OPTIONS, szTitle);	
    	Disable(BACKBUTTON);	
    	nResult = AskOptions( EXCLUSIVE, szMsg, szOpt1, bOpt1, szOpt2, bOpt2);

    	if(bOpt1 = TRUE) then
    		RestartNetscape();
    	endif;
    	
	endif;
	
    return nResult;
end;


///////////////////////////////////////////////////////////////////////////////
//
//  Function: DialogShowSdFinishReboot
//
//  Purpose: This function will show the last dialog of the product.
//           It will allow the user to reboot and/or show some readme text.
//
///////////////////////////////////////////////////////////////////////////////
function DialogShowSdFinishReboot()
    NUMBER nResult, nDefOptions;
    STRING szTitle, szMsg1, szMsg2, szOption1, szOption2,foo;
    NUMBER bOpt1, bOpt2;

begin

    if (!BATCH_INSTALL) then
        bOpt1 = FALSE;
        bOpt2 = TRUE;
        szMsg1 = "Setup has finished installing " + @THE_PRODUCT_NAME_LC +
        		 " on your computer. \r\n" +
        	     "If you wish, Setup can display the Read Me File and launch " +
        		 @THE_PRODUCT_NAME_LC + " for you. Choose the options you want below.";
        szMsg2 = "";
        szOption1 = "Read the Read Me file.";
        szOption2 = "Launch " + @THE_PRODUCT_NAME_LC + ".";
        nResult = SdFinish( szTitle, szMsg1, szMsg2, szOption1, szOption2, bOpt1, bOpt2 );

		if (bOpt1) then
//			MessageBox(TARGETDIR^'\\Readme',INFORMATION);
			LaunchApp(WINDIR^'Notepad.exe',TARGETDIR^'Readme.txt');
			
		
		endif;
		if (bOpt2) then
//			MessageBox(TARGETDIR^'\\freeamp.exe',INFORMATION);
			ChangeDirectory(TARGETDIR);
			LaunchApp(@PRODUCT_KEY,'');
			//nResult = CreateRegistrySet("RegisterFileTypes");
		endif;

        return 0;
    endif;

    nDefOptions = SYS_BOOTMACHINE;
    szTitle     = "";
    szMsg1      = "";
    szMsg2      = "";
    nResult     = SdFinishReboot( szTitle, szMsg1, nDefOptions, szMsg2, 0 );

    return nResult;
end;

// --- include script file section ---

#include "sddialog.rul"

































